version: '3.8'

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: devopsStage2
      POSTGRES_USER: aicodeen
      POSTGRES_PASSWORD: naGoddeyrun@m
    volumes:
      - db_data:/var/lib/postgresql/data

  backend:
    env_file: './backend/.env'
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - db
    labels:
      - "traefik.http.routers.backend.rule=Host(`aico.crabdance.com`) && PathPrefix(`/api`, `/docs`, `/redoc`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    env_file: './frontend/.env'
    labels:
      - "traefik.http.routers.frontend.rule=Host(`aico.crabdance.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/letsencrypt:/etc/letsencrypt
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
      - db
      - adminer
      - nginx-proxy-manager

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '81:81' # Admin Web Port
    volumes:
      - ./proxy/data:/data
      - ./proxy/letsencrypt:/etc/letsencrypt
    labels:
      - "traefik.http.routers.proxy.rule=Host(`proxy.aico.crabdance.com`)"
      - "traefik.http.services.proxy.loadbalancer.server.port=81"

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    environment:
      ADMINER_DEFAULT_SERVER: db
    labels:
      - "traefik.http.routers.adminer.rule=Host(`db.aico.crabdance.com`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

volumes:
  db_data:
